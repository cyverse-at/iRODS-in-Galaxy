<tool id="history_sum" name="History Summary custom" version="0.1">
  <description>oli wapi</description>
  <command interpreter="python">
    ##------------------------------------------------------------------------------------
    ## This function calculates the associations between the different jobs based on the
    ## datasets used as input or output for the jobs.
    ##------------------------------------------------------------------------------------
    #def findJobAssociations_HistoryDataset($dataset, $job_associations)
        #if ($use_deleted or $dataset.deleted == False) and ($use_hidden or $dataset.visible == True)
            #for $assoc in $dataset.creating_job_associations
                #set $job_associations[$assoc.job.id] = $assoc.job
            #end for
        #end if
    #end def

    ##------------------------------------------------------------------------------------
    ## This function calculates the associations between the different jobs based on the
    ## collection of datasets used as input or output for the jobs.
    ##------------------------------------------------------------------------------------
    #def findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
        #if ($use_deleted or $dataset_coll.deleted == False) and ($use_hidden or $dataset_coll.visible == True)
            $findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
        #end if
    #end def

    ##------------------------------------------------------------------------------------
    ## This function calculates recursively the associations between the different jobs
    ## based on the collection of datasets used as input or output for the jobs.
    ##------------------------------------------------------------------------------------
    #def findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
        #for $dataset in $dataset_coll.elements
            #if $dataset.hda
                $findJobAssociations_HistoryDataset($dataset.hda, $job_associations)
            ##elif $dataset.ldda
            ##    #TODO
            ##    $enum_LibraryDatasetAssociation($dataset.ldda, $job_associations)
            #elif $dataset.child_collection
                $findJobAssociations_HistoryDatasetCollection_rec($dataset.child_collection, $job_associations)
            #end if
        #end for
    #end def

    ##------------------------------------------------------------------------------------
    ## This function creates a new instance of an Input object that will be added to a
    ## job instance
    ##------------------------------------------------------------------------------------
    #def createInputInstance($jda)
      #set $instance = {}
      #if $jda.dataset
        #set $instance["name"] = str($jda.name)
        #set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
        #set $instance["file"] = str($jda.dataset.name)
      #end if
      #return $instance
    #end def

    ##------------------------------------------------------------------------------------
    ## This function creates a new instance of an Output object that will be added to a
    ## job instance
    ##------------------------------------------------------------------------------------
    #def createOutputInstance($jda)
      #set $instance = {}
      #if $jda.dataset
        #set $instance["name"] = str($jda.name)
        #set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
        #set $instance["file"] = str($jda.dataset.name)
      #end if
      #return $instance
    #end def

    ##------------------------------------------------------------------------------------
    ## This function creates a new instance of Job.
    ##------------------------------------------------------------------------------------
    #def createJobInstance($job)
      #set $instance = {}
      #set $instance["id"] = str($job.tool_id)
      #set $instance["state"] = str($job.state)
      #set $instance["exit_code"] = str($job.exit_code)
      #set $instance["input"] = []
      #set $instance["output"] = []

      #for $input_dataset in $job.input_datasets
          $instance["input"].append($createInputInstance($input_dataset))
      #end for

      #for $output_dataset in $job.output_datasets
          $instance["output"].append($createOutputInstance($output_dataset))
      #end for

      #return $instance
    #end def

    ##------------------------------------------------------------------------------------
    ## Main body of the tool
    ##------------------------------------------------------------------------------------
    ## First we process the current history and get a table with the metadata for each job
    #set global $history = $output.creating_job.history
    #set $job_associations = {}
    #for $dataset in $history.datasets
      $findJobAssociations_HistoryDataset($dataset, $job_associations)
    #end for
    #for $dataset_coll in $history.dataset_collections
        $findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
    #end for

    ## Now we export the table to a string
    #set $history_text=""
    #for $job_id, $job in $job_associations.iteritems()
        #if $job_id != $output.creating_job.id
            #set $history_text+= "" + str($createJobInstance($job))
        #end if
    #end for

    ##Execute the main tool script
    dummy.py "$history_text"
  </command>
  <inputs>
      <param name="use_hidden" label='Include hidden contents' type="boolean" truevalue="True" falsevalue="" checked="True" />
      <param name="use_deleted" label='Include deleted contents' type="boolean" truevalue="True" falsevalue="" />
      <param name="dummy" label='Dummy input for workflows' type="data" />
  </inputs>
  <outputs>
    <data format="html" name="output"  label="${tool.name}: html"/>
  </outputs>
  <help>olga</help>
</tool>
