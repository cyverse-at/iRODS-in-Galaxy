<tool id="irods_push" name="Save files to iRODS" version="0.1" workflow_compatible="true">
	<description>Save your files from the Galaxy workflow in iRODS</description>
	<requirements>
		<requirement type="package" version="0.5.0">pythonirodsclient</requirement>
	</requirements>

	<command interpreter="python">
		##------------------------------------------------------------------------------------
		## This function calculates the associations between the different jobs based on the
		## datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDataset($dataset, $job_associations)
			#if ($use_deleted or $dataset.deleted == False) and ($use_hidden or $dataset.visible == True)
				#for $assoc in $dataset.creating_job_associations
					#set $job_associations[$assoc.job.id] = $assoc.job
				#end for
			#end if
		#end def

		##------------------------------------------------------------------------------------
		## This function calculates the associations between the different jobs based on the
		## collection of datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
			#if ($use_deleted or $dataset_coll.deleted == False) and ($use_hidden or $dataset_coll.visible == True)
				$findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
			#end if
		#end def

		##------------------------------------------------------------------------------------
		## This function calculates recursively the associations between the different jobs
		## based on the collection of datasets used as input or output for the jobs.
		##------------------------------------------------------------------------------------
		#def findJobAssociations_HistoryDatasetCollection_rec($dataset_coll, $job_associations)
			#for $dataset in $dataset_coll.elements
				#if $dataset.hda
					$findJobAssociations_HistoryDataset($dataset.hda, $job_associations)
				##elif $dataset.ldda
					##		#TODO
					##		$enum_LibraryDatasetAssociation($dataset.ldda, $job_associations)
				#elif $dataset.child_collection
					$findJobAssociations_HistoryDatasetCollection_rec($dataset.child_collection, $job_associations)
				#end if
			#end for
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of an Input object that will be added to a
		## job instance
		## http://galaxy.readthedocs.io/en/master/_modules/galaxy/model.html#Dataset
		##------------------------------------------------------------------------------------
		#def createInputInstance($jda)
			#set $instance = {}
			#if $jda.dataset
				#set $instance["name"] = str($jda.name)
				#set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
				#set $instance["file"] = str($jda.dataset.name)
			#end if
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of an Output object that will be added to a
		## job instance
		##------------------------------------------------------------------------------------
		#def createOutputInstance($jda)
			#set $instance = {}
			#if $jda.dataset
				#set $instance["name"] = str($jda.name)
				#set $instance["id"] = str($__app__.security.encode_id($jda.dataset.id))
				#set $instance["file"] = str($jda.dataset.name)
			#end if
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of a Parameter object that will be added to a
		## job instance
		##------------------------------------------------------------------------------------
		#def createParameterInstance($parameter_name, $parameter_value)
			##Check if is a dict
			#if isinstance($parameter_value, dict):
				#for $parameter_name_aux, $parameter_value_aux in $parameter_value.items()
					#set $parameterInstance = $createParameterInstance($parameter_name_aux, $parameter_value_aux)
					#if $parameterInstance != ""
						#set $parameter_value[$parameter_name_aux] = $parameterInstance
					#else
						#del $parameter_value[$parameter_name_aux]
					#end if
				#end for
			##Check if is a list
			#else if isinstance($parameter_value, list):
				#set $i = 1
				#set $aux = {}
				#for $parameter_value_aux in $parameter_value
					#set $parameterInstance = $createParameterInstance(str($i), $parameter_value_aux)
					#if $parameterInstance != ""
						#set $aux[$i] = $parameterInstance
						#set $i=$i+1
					#end if
				#end for
				#set $parameter_value = $aux.values()
			##Check if is an object
			#else
				#try
					##Ignore HistoryDatasetAssociation objects and parameters not interesting
					#if ("HistoryDatasetAssociation" in $parameter_value.__class__.__name__) or ($parameter_name.startswith("__")):
						#return ""
					#end if
				#except
					#pass
				#end try

				#set $parameter_value = str($parameter_value)
			#end if

			#set $instance = {"name" : $parameter_name, "value" : $parameter_value}
			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## This function creates a new instance of Job.
		## http://galaxy.readthedocs.io/en/master/_modules/galaxy/model.html#Job
		##------------------------------------------------------------------------------------
		#def createJobInstance($job)
			#set $instance = {}
			#set $instance["id"] = str($job.id)
			#set $instance["tool_id"] = str($job.tool_id)
			#set $instance["tool_version"] = str($job.tool_version)
			#set $instance["state"] = str($job.state)
			#set $instance["exit_code"] = str($job.exit_code)
			#set $instance["inputs"] = []
			#set $instance["outputs"] = []
			#set $instance["parameters"] = []

			#for $input_dataset in $job.input_datasets
				$instance["inputs"].append($createInputInstance($input_dataset))
			#end for

			#for $output_dataset in $job.output_datasets
				$instance["outputs"].append($createOutputInstance($output_dataset))
			#end for

			#if $job.tool_id != "upload1"
				#set $parameters = $job.get_param_values($__app__)
				#for $parameter_name, $parameter_value in $parameters.items()
					#set $parameter = $createParameterInstance($parameter_name, $parameter_value)
					#if $parameter != ""
						$instance["parameters"].append($parameter)
					#end if
				#end for
			#end if

			#return $instance
		#end def

		##------------------------------------------------------------------------------------
		## Main body of the tool
		##------------------------------------------------------------------------------------
		## First we process the current history and get a table with the metadata for each job
		#set global $history = $output.creating_job.history
		#set global $use_deleted = True
		#set global $use_hidden = True

		#set $job_associations = {}
		#for $dataset in $history.datasets
			$findJobAssociations_HistoryDataset($dataset, $job_associations)
		#end for
		#for $dataset_coll in $history.dataset_collections
			$findJobAssociations_HistoryDatasetCollection($dataset_coll, $job_associations)
		#end for

		## Now we export the table to a string
		#set $job_table={}
		#for $job_id, $job in $job_associations.iteritems()
			#if $job_id != $output.creating_job.id
				#set $job_table[str($job_id)] = $createJobInstance($job)
			#end if
		#end for

		## Set the params for the next Python script
		#set params={}
		##1. Destination directory
		#set params["destination_dir"] = str($destinationDir)
		##2. Overwrite option
		#set params["overwrite"] = str($overwrite)
		##3. The history ID
		#set params["history_id"] = $__app__.security.encode_id($output.history.id)
		##4. The selected dataset id
		#set params["dataset_id"] = $__app__.security.encode_id('%s' % $selectedFiles.id)
		##5. The selected dataset name
		#set params["dataset_name"] = str($selectedFiles.name)
		##6. The selected dataset file name
		#set params["file_name"] = str($selectedFiles.file_name)
		##7. The selected dataset file format
		#set params["file_format"] = str($output.ext)
		##8. The output file dir for the job
		#set params["output_dir"] = str($output.files_path)
		##9. Current Galaxy user
		#set params["user_name"] = str($__user_name__)

		#if $user_option.typeUser=="use_custom_user"
			##10. Custom user
			#set params["custom_user"] = str($user_option.custom_user)
			##11. Custom pass
			#set params["custom_pass"] = str($user_option.custom_pass)
		#end if

		#import json
		#set $file=open($params["output_dir"] + '.tmp', 'w+')
		$file.write(json.dumps($job_table))
		#set $params=json.dumps($params)

		##Execute the main tool script
		irods_push.py '$params'
	</command>

	<inputs>
		<param type="select" display="radio" name="overwrite" label="Overwrite existing files?">
			<option value="false">No</option>
			<option value="true">Yes, overwrite (use at your own risk)</option>
		</param>
		<param name="destinationDir" type="text" value="" label="Destination directory (click here to choose):" />
		<conditional name="user_option">
			<param type="select" display="radio" name="typeUser" label="Credentials for iRODS [see help for more information]: ">
				<option value="use_galaxy_user">Use my Galaxy username for iRODS.</option>
				<option value="use_custom_user">Use custom credentials.</option>
			</param>
			<when value="use_custom_user">
				<param name="custom_user" type="text" value="" label="iRODS username:" />
				<param name="custom_pass" type="text" value="" label="iRODS password:" />
			</when>
		</conditional>
		<param format="data" name="selectedFiles" type="data" label="File(s) to export:" />
	</inputs>

	<outputs>
		<data format="txt" name="output" metadata_source="selectedFiles"/>
	</outputs>

	<help>
===============
iRODS push
===============


**What it does**

Use this tool to save files from the current Galaxy history to the selected location in your iRODS filesystem.
This tool also stored some metadata for each file, including the author (galaxy user), history identifier, and
the *file provenance*.

--------

**How to use**

First choose the directory in iRODS where the files will be saved using the directory browser (if available).
Alternatively, you can write the complete path to the destination directory.

Then, choose the file(s) that you want to save and click on "Execute".

By default, the tool will use your galaxy username as iRODS user.
If you want to use your own iRODS credentials choose the option *Use custom credentials* and fill the corresponding fields.

.. class:: warningmark

**Note**: By default files are not overwrited so if a file already exists at the specified folder (with the same name), by default the new file will be stored with an automatic suffix (e.g. myfile_2.txt).
You can change the default behaviour by checking the corresponding option at the form. Use this option with caution and always at your own risk.

-----

**Author**: Rafael Hernández de Diego [SLU Global Bioinformatics Centre]

**Author**: Partially based on the work of Katherine Beaulieu [AAFC-MBB]

Sources are available at https://github.com/fikipollo/iRODS-in-Galaxy

	</help>
</tool>
